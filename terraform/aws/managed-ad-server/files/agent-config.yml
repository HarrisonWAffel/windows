version: 1.0
tasks:
- task: enableOpenSsh

- task: executeScript
  inputs:
  - frequency: once
    type: powershell
    runAs: admin
    content: |-
      $AccountName = 'awsSeamlessDomain'
      # DO NOT modify anything below this comment.
      # Getting Active Directory information.
      Import-Module 'ActiveDirectory'
      $Domain = Get-ADDomain -ErrorAction Stop
      $BaseDn = $Domain.DistinguishedName
      $ComputersContainer = $Domain.ComputersContainer
      $SchemaNamingContext = Get-ADRootDSE | Select-Object -ExpandProperty 'schemaNamingContext'
      [System.GUID]$ServicePrincipalNameGuid = (Get-ADObject -SearchBase $SchemaNamingContext -Filter { lDAPDisplayName -eq 'Computer' } -Properties 'schemaIDGUID').schemaIDGUID
      # Getting Service account Information.
      $AccountProperties = Get-ADUser -Identity $AccountName
      $AccountSid = New-Object -TypeName 'System.Security.Principal.SecurityIdentifier' $AccountProperties.SID.Value
      # Getting ACL settings for the Computers container.
      $ObjectAcl = Get-ACL -Path "AD:\$ComputersContainer" 
      # Setting ACL allowing the service account the ability to create child computer objects in the Computers container.
      $AddAccessRule = New-Object -TypeName 'System.DirectoryServices.ActiveDirectoryAccessRule' $AccountSid, 'CreateChild', 'Allow', $ServicePrincipalNameGUID, 'All'
      $ObjectAcl.AddAccessRule($AddAccessRule)
      Set-ACL -AclObject $ObjectAcl -Path "AD:\$ComputersContainer"
    
- task: executeScript
  inputs:
  - frequency: once
    type: powershell
    runAs: admin
    content: |-
      $GPMC = Get-WindowsFeature -Name GPMC
      if (-not $GPMC.Installed)
      {
      Install-WindowsFeature -Name GPMC
      }
      
      $RSATADP = Get-WindowsFeature -Name RSAT-AD-PowerShell
      if (-not $RSATADP.Installed)
      {
      Install-WindowsFeature -Name RSAT-AD-PowerShell
      }
      
      $RSATADAC = Get-WindowsFeature -Name RSAT-AD-AdminCenter
      if (-not $RSATADAC.Installed)
      {
      Install-WindowsFeature -Name RSAT-AD-AdminCenter
      }
      
      $RSATADDSTools = Get-WindowsFeature -Name RSAT-ADDS-Tools
      if (-not $RSATADDSTools.Installed)
      {
      Install-WindowsFeature -Name RSAT-ADDS-Tools
      }
      
      $RSATDNS = Get-WindowsFeature -Name RSAT-DNS-Server
      if (-not $RSATDNS.Installed)
      {
      Install-WindowsFeature -Name RSAT-DNS-Server
      }
      
      $RSATADDS = Get-WindowsFeature -Name RSAT-ADDS
      if (-not $RSATADDS.Installed)
      {
      Install-WindowsFeature -Name RSAT-ADDS
      exit 3010 
      }
